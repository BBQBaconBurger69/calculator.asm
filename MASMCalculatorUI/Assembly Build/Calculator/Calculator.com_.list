EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Calculator.com_ -- emu8086 assembler version: 4.08  
 
[ 4/9/2025  --  10:32:23 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       
[   5]        :                                       INCLUDE EMU8086.INC     ;Including Library
[   6]        :                                       
[   7]        :                                       org 100h
[   8]        :                                       
[   9]    0100: E9 76 02                              .data       ;Data Segment
[  10]        :                                       
[  11]    0103: 20 20 31 2E 20 41 64 64 69 74 69 6F   msg_intro db '  1. Addition', 0dh,0ah, '  2. Subtration', 0dh,0ah, '  3. Multiplication', 0dh,0ah, '  4. Division', 0dh,0ah, '  5. Negation', 0dh,0ah, '  6. Square', 0dh,0ah, '  7. Cube', 0dh,0ah, '  8. OR', 0dh,0ah, '  9. AND ', 0dh,0ah, ' 10. XOR', 0dh,0ah, ' 11. NOT',0dh,0ah, ' 12. Modulus',0dh,0ah, '  0. EXIT', '$'
                6E 0D 0A 20 20 32 2E 20 53 75 62 74 
                72 61 74 69 6F 6E 0D 0A 20 20 33 2E 
                20 4D 75 6C 74 69 70 6C 69 63 61 74 
                69 6F 6E 0D 0A 20 20 34 2E 20 44 69 
                76 69 73 69 6F 6E 0D 0A 20 20 35 2E 
                20 4E 65 67 61 74 69 6F 6E 0D 0A 20 
                20 36 2E 20 53 71 75 61 72 65 0D 0A 
                20 20 37 2E 20 43 75 62 65 0D 0A 20 
                20 38 2E 20 4F 52 0D 0A 20 20 39 2E 
                20 41 4E 44 20 0D 0A 20 31 30 2E 20 
                58 4F 52 0D 0A 20 31 31 2E 20 4E 4F 
                54 0D 0A 20 31 32 2E 20 4D 6F 64 75 
                6C 75 73 0D 0A 20 20 30 2E 20 45 58 
                49 54 24                            
[  12]        :                                       
[  13]    01AE: 54 68 65 20 53 55 4D 20 6F 66 20 74   msg_A db 'The SUM of two Numbers = $', 0dh,0ah       ;Printing Strings
                77 6F 20 4E 75 6D 62 65 72 73 20 3D 
                20 24 0D 0A                         
[  14]    01CA: 54 68 65 20 53 55 42 54 52 41 43 54   msg_S db 'The SUBTRACTION of two Numbers = $', 0dh,0ah
                49 4F 4E 20 6F 66 20 74 77 6F 20 4E 
                75 6D 62 65 72 73 20 3D 20 24 0D 0A 
                                                    
[  15]    01EE: 54 68 65 20 4D 55 4C 54 49 50 4C 49   msg_M db 'The MULTIPLICATION of two Numbers = $', 0dh,0ah
                43 41 54 49 4F 4E 20 6F 66 20 74 77 
                6F 20 4E 75 6D 62 65 72 73 20 3D 20 
                24 0D 0A                            
[  16]    0215: 54 68 65 20 44 49 56 49 53 49 4F 4E   msg_D db 'The DIVISION of two Numbers = $', 0dh,0ah
                20 6F 66 20 74 77 6F 20 4E 75 6D 62 
                65 72 73 20 3D 20 24 0D 0A          
[  17]    0236: 54 68 65 20 4E 45 47 20 76 61 6C 75   msg_N db 'The NEG value of Number = $', 0dh,0ah
                65 20 6F 66 20 4E 75 6D 62 65 72 20 
                3D 20 24 0D 0A                      
[  18]    0253: 54 68 65 20 53 51 55 41 52 45 20 6F   msg_SQ db 'The SQUARE of Number = $', 0dh,0ah
                66 20 4E 75 6D 62 65 72 20 3D 20 24 
                0D 0A                               
[  19]    026D: 54 68 65 20 43 55 42 45 20 6F 66 20   msg_CB db 'The CUBE of Number = $', 0dh,0ah
                4E 75 6D 62 65 72 20 3D 20 24 0D 0A 
                                                    
[  20]    0285: 54 68 65 20 4F 52 20 6F 70 65 72 61   msg_OR db 'The OR operation of two Number = $', 0dh,0ah
                74 69 6F 6E 20 6F 66 20 74 77 6F 20 
                4E 75 6D 62 65 72 20 3D 20 24 0D 0A 
                                                    
[  21]    02A9: 54 68 65 20 41 4E 44 20 6F 70 65 72   msg_AND db 'The AND operation of two  Number = $', 0dh,0ah
                61 74 69 6F 6E 20 6F 66 20 74 77 6F 
                20 20 4E 75 6D 62 65 72 20 3D 20 24 
                0D 0A                               
[  22]    02CF: 54 68 65 20 58 4F 52 20 6F 70 65 72   msg_XOR db 'The XOR operation of two Number = $', 0dh,0ah
                61 74 69 6F 6E 20 6F 66 20 74 77 6F 
                20 4E 75 6D 62 65 72 20 3D 20 24 0D 
                0A                                  
[  23]    02F4: 54 68 65 20 4E 4F 54 20 6F 66 20 4E   msg_NOT db 'The NOT of Number = $', 0dh,0ah
                75 6D 62 65 72 20 3D 20 24 0D 0A    
[  24]    030B: 54 68 65 20 4D 4F 44 55 4C 55 53 20   msg_MD db 'The MODULUS of Two Numbers = $', 0dh,0ah
                6F 66 20 54 77 6F 20 4E 75 6D 62 65 
                72 73 20 3D 20 24 0D 0A             
[  25]        :                                       
[  26]    032B: 0A 0D 44 6F 20 79 6F 75 20 77 61 6E   cont db 10,13,'Do you want to Use Again ? $'
                74 20 74 6F 20 55 73 65 20 41 67 61 
                69 6E 20 3F 20 24                   
[  27]    0349: 20 20 20 20 20 20 20 20 20 20 20 20   bye db '            **** Thank You !!!  :) **** $'
                2A 2A 2A 2A 20 54 68 61 6E 6B 20 59 
                6F 75 20 21 21 21 20 3A 29 20 2A 2A 
                2A 2A 20 24                         
[  28]        :                                       
[  29]    0371: 00 00                                 val1 dw ?       ;Uninitialize
[  30]    0373: 00 00                                 val2 dw ?       ;Uninitialize
[  31]    0375: 00 00                                 res dw ?
[  32]    0377: 00 00                                 agn dw ?
[  33]        :                                       
[  34]    0379:                                       .code       ;Code Segment
[  35]    0379:                                       MAIN PROC
[  36]        :                                       
[  37]    0379: 8C C8                                 MOV AX, @data
[  38]    037B: 8E D8                                 MOV DS, AX
[  39]        :                                       
[  40]    037D:                                       Start:                  ;Start Lable
[  41]        :                                       
[  42]    037D: 50 56 EB 26 20 20 20 20 20 20 20 20   print '             **** CALCULATOR ****    '
                20 20 20 20 20 2A 2A 2A 2A 20 43 41 
                4C 43 55 4C 41 54 4F 52 20 2A 2A 2A 
                2A 20 20 20 20 00 BE 81 03 2E 8A 04 
                3C 00 74 07 46 B4 0E CD 10 EB F2 5E 
                58                                  
[  43]    03BA: 50 56 EB 03 0D 0A 00 BE BE 03 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  44]        :                                       
[  45]    03D4: 50 56 EB 03 0D 0A 00 BE D8 03 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  46]    03EE: B4 09                                 MOV AH,9
[  47]    03F0: BA 03 01                              MOV DX, OFFSET msg_intro
[  48]    03F3: CD 21                                 INT 21h
[  49]        :                                       
[  50]    03F5: 50 56 EB 03 0D 0A 00 BE F9 03 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  51]    040F: 50 56 EB 03 0D 0A 00 BE 13 04 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  52]    0429: 50 56 EB 15 53 65 6C 65 63 74 20 41   print 'Select Any Option : '
                6E 79 20 4F 70 74 69 6F 6E 20 3A 20 
                00 BE 2D 04 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[  53]    0455: E8 8C 0F                              CALL scan_num
[  54]    0458: 50 56 EB 03 0D 0A 00 BE 5C 04 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  55]    0472: 50 56 EB 03 0D 0A 00 BE 76 04 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[  56]        :                                       
[  57]    048C: 83 F9 00                              CMP CX, 0
[  58]    048F: 75 03 E9 12 0F                        JE _Bye         ;Jumps to Exit Func if input is equal to 0
[  59]        :                                       
[  60]        :                                       
[  61]    0494: 83 F9 01                              CMP CX, 1
[  62]    0497: 74 58                                 JE Addition     ;Jumps to Addition Func if input is equal to 1
[  63]        :                                       
[  64]        :                                       
[  65]    0499: 83 F9 02                              CMP CX, 2
[  66]    049C: 75 03 E9 84 01                        JE Subtraction     ;Jumps to Substraction Func if input is equal to 2
[  67]        :                                       
[  68]        :                                       
[  69]    04A1: 83 F9 03                              CMP CX, 3
[  70]    04A4: 75 03 E9 B3 02                        JE Multiplication     ;Jumps to Multiplication Func if input is equal to 3
[  71]        :                                       
[  72]        :                                       
[  73]    04A9: 83 F9 04                              CMP CX, 4
[  74]    04AC: 75 03 E9 E5 03                        JE Division     ;Jumps to Division Func if input is equal to 4
[  75]        :                                       
[  76]        :                                       
[  77]    04B1: 83 F9 05                              CMP CX, 5
[  78]    04B4: 75 03 E9 1E 05                        JE Negation     ;Jumps to Absolute Func if input is equal to 5
[  79]        :                                       
[  80]        :                                       
[  81]    04B9: 83 F9 06                              CMP CX, 6
[  82]    04BC: 75 03 E9 F4 05                        JE Square       ;Jumps to Square Func if input is equal to 6
[  83]        :                                       
[  84]        :                                       
[  85]    04C1: 83 F9 07                              CMP CX, 7
[  86]    04C4: 75 03 E9 C8 06                        JE Cube       ;Jumps to Cube Func if input is equal to 7
[  87]        :                                       
[  88]        :                                       
[  89]    04C9: 83 F9 08                              CMP CX, 8
[  90]    04CC: 75 03 E9 D9 08                        JE _OR       ;Jumps to _OR Func if input is equal to 8
[  91]        :                                       
[  92]        :                                       
[  93]    04D1: 83 F9 09                              CMP CX, 9
[  94]    04D4: 75 03 E9 06 0A                        JE _AND       ;Jumps to _AND Func if input is equal to 9
[  95]        :                                       
[  96]        :                                       
[  97]    04D9: 83 F9 0A                              CMP CX, 10
[  98]    04DC: 75 03 E9 34 0B                        JE _XOR       ;Jumps to _NOT Func if input is equal to 10
[  99]        :                                       
[ 100]        :                                       
[ 101]    04E1: 83 F9 0B                              CMP CX, 11
[ 102]    04E4: 75 03 E9 62 0C                        JE _NOT       ;Jumps to _NOT Func if input is equal to 11
[ 103]        :                                       
[ 104]        :                                       
[ 105]    04E9: 83 F9 0C                              CMP CX, 12
[ 106]    04EC: 75 03 E9 80 07                        JE Modulus    ;Jumps to Modulus Func if input is equal to 12
[ 107]        :                                       
[ 108]        :                                       ;FUNCTIONS
[ 109]        :                                       
[ 110]    04F1:                                       Addition:       ;Addition Func
[ 111]        :                                       
[ 112]    04F1: 50 56 EB 1A 20 20 20 20 20 2A 2A 2A   print '     ****--Addition--****'
                2A 2D 2D 41 64 64 69 74 69 6F 6E 2D 
                2D 2A 2A 2A 2A 00 BE F5 04 2E 8A 04 
                3C 00 74 07 46 B4 0E CD 10 EB F2 5E 
                58                                  
[ 113]    0522: 50 56 EB 03 0D 0A 00 BE 26 05 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 114]    053C: 50 56 EB 03 0D 0A 00 BE 40 05 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 115]    0556: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE 5A 05 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 116]    0582: E8 5F 0E                              CALL scan_num       ;First no. input
[ 117]    0585: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 118]        :                                       
[ 119]    0589: 50 56 EB 03 0D 0A 00 BE 8D 05 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 120]        :                                       
[ 121]    05A3: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE A7 05 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 122]    05D0: E8 11 0E                              CALL scan_num       ;Second no. input
[ 123]    05D3: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 124]    05D7: 50 56 EB 03 0D 0A 00 BE DB 05 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 125]        :                                       
[ 126]    05F1: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 127]    05F4: 03 06 73 03                           ADD AX, val2        ;Adding AX to val2
[ 128]    05F8: A3 75 03                              MOV res, AX         ;Storing AX in res
[ 129]        :                                       
[ 130]    05FB: 50 56 EB 03 0D 0A 00 BE FF 05 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 131]    0615: B4 09                                 MOV AH,9
[ 132]    0617: BA AE 01                              MOV DX, OFFSET msg_A    ;Displaying Message
[ 133]    061A: CD 21                                 INT 21h                 ;Calling Interrupt
[ 134]        :                                       
[ 135]    061C: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 136]    061F: E8 87 0E                              CALL print_num          ;Printing AX reg
[ 137]        :                                       
[ 138]    0622: E9 CD 0C                              JMP Con                 ;Goes to Con Func
[ 139]        :                                       
[ 140]        :                                       
[ 141]    0625:                                       Subtraction:        ;Subtraction Func
[ 142]        :                                       
[ 143]    0625: 50 56 EB 1D 20 20 20 20 20 2A 2A 2A   print '     ****--Subtraction--****'
                2A 2D 2D 53 75 62 74 72 61 63 74 69 
                6F 6E 2D 2D 2A 2A 2A 2A 00 BE 29 06 
                2E 8A 04 3C 00 74 07 46 B4 0E CD 10 
                EB F2 5E 58                         
[ 144]    0659: 50 56 EB 03 0D 0A 00 BE 5D 06 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 145]    0673: 50 56 EB 03 0D 0A 00 BE 77 06 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 146]    068D: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE 91 06 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 147]    06B9: E8 28 0D                              CALL scan_num       ;First no. input
[ 148]    06BC: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 149]        :                                       
[ 150]    06C0: 50 56 EB 03 0D 0A 00 BE C4 06 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 151]        :                                       
[ 152]    06DA: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE DE 06 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 153]    0707: E8 DA 0C                              CALL scan_num       ;Second no. input
[ 154]    070A: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 155]    070E: 50 56 EB 03 0D 0A 00 BE 12 07 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 156]        :                                       
[ 157]    0728: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 158]    072B: 2B 06 73 03                           SUB AX, val2        ;Subtracting AX with val2
[ 159]    072F: A3 75 03                              MOV res, AX         ;Storing AX in res
[ 160]        :                                       
[ 161]    0732: 50 56 EB 03 0D 0A 00 BE 36 07 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 162]    074C: B4 09                                 MOV AH,9
[ 163]    074E: BA CA 01                              MOV DX, OFFSET msg_S    ;Displaying Message
[ 164]    0751: CD 21                                 INT 21h                 ;Calling Interrupt
[ 165]        :                                       
[ 166]    0753: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 167]    0756: E8 50 0D                              CALL print_num          ;Printing AX reg
[ 168]        :                                       
[ 169]    0759: E9 96 0B                              JMP Con                 ;Goes to Con Func
[ 170]        :                                       
[ 171]        :                                       
[ 172]    075C:                                       Multiplication:        ;Multiplication Func
[ 173]        :                                       
[ 174]    075C: 50 56 EB 20 20 20 20 20 20 2A 2A 2A   print '     ****--Multiplication--****'
                2A 2D 2D 4D 75 6C 74 69 70 6C 69 63 
                61 74 69 6F 6E 2D 2D 2A 2A 2A 2A 00 
                BE 60 07 2E 8A 04 3C 00 74 07 46 B4 
                0E CD 10 EB F2 5E 58                
[ 175]    0793: 50 56 EB 03 0D 0A 00 BE 97 07 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 176]    07AD: 50 56 EB 03 0D 0A 00 BE B1 07 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 177]    07C7: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE CB 07 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 178]    07F3: E8 EE 0B                              CALL scan_num       ;First no. input
[ 179]    07F6: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 180]        :                                       
[ 181]    07FA: 50 56 EB 03 0D 0A 00 BE FE 07 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 182]        :                                       
[ 183]    0814: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE 18 08 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 184]    0841: E8 A0 0B                              CALL scan_num       ;Second no. input
[ 185]    0844: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 186]    0848: 50 56 EB 03 0D 0A 00 BE 4C 08 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 187]        :                                       
[ 188]    0862: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 189]    0865: F7 26 73 03                           MUL val2            ;Multiplying AX with val2
[ 190]    0869: A3 75 03                              MOV res, AX         ;Storing AX in res
[ 191]        :                                       
[ 192]    086C: 50 56 EB 03 0D 0A 00 BE 70 08 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 193]    0886: B4 09                                 MOV AH,9
[ 194]    0888: BA EE 01                              MOV DX, OFFSET msg_M    ;Displaying Message
[ 195]    088B: CD 21                                 INT 21h                 ;Calling Interrupt
[ 196]        :                                       
[ 197]    088D: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 198]    0890: E8 16 0C                              CALL print_num          ;Printing AX reg
[ 199]        :                                       
[ 200]    0893: E9 5C 0A                              JMP Con                 ;Goes to Con Func
[ 201]        :                                       
[ 202]        :                                       
[ 203]    0896:                                       Division:        ;Division Func
[ 204]        :                                       
[ 205]    0896: 50 56 EB 1A 20 20 20 20 20 2A 2A 2A   print '     ****--Division--****'
                2A 2D 2D 44 69 76 69 73 69 6F 6E 2D 
                2D 2A 2A 2A 2A 00 BE 9A 08 2E 8A 04 
                3C 00 74 07 46 B4 0E CD 10 EB F2 5E 
                58                                  
[ 206]    08C7: 50 56 EB 03 0D 0A 00 BE CB 08 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 207]    08E1: 50 56 EB 03 0D 0A 00 BE E5 08 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 208]    08FB: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE FF 08 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 209]    0927: E8 BA 0A                              CALL scan_num       ;First no. input
[ 210]    092A: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 211]    092E: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 212]        :                                       
[ 213]    0931: 50 56 EB 03 0D 0A 00 BE 35 09 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 214]        :                                       
[ 215]    094B: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE 4F 09 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 216]    0978: E8 69 0A                              CALL scan_num       ;Second no. input
[ 217]    097B: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 218]    097F: 8B 1E 73 03                           MOV BX, val2
[ 219]    0983: 50 56 EB 03 0D 0A 00 BE 87 09 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 220]        :                                       
[ 221]    099D: 83 FB 00                              CMP BX, 0      ;if divisor = 2
[ 222]    09A0: 75 03 E9 86 08                        JE Error        ;overflow
[ 223]        :                                       
[ 224]    09A5: BA 00 00                              MOV DX, 0           ;Moving 0 in DX to avoid overflow
[ 225]        :                                       
[ 226]    09A8: F7 F3                                 DIV BX            ;Dividing AX with val2
[ 227]    09AA: A3 75 03                              MOV res, AX         ;Storing AX in res
[ 228]        :                                       
[ 229]    09AD: 50 56 EB 03 0D 0A 00 BE B1 09 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 230]    09C7: B4 09                                 MOV AH,9
[ 231]    09C9: BA 15 02                              MOV DX, OFFSET msg_D    ;Displaying Message
[ 232]    09CC: CD 21                                 INT 21h                 ;Calling Interrupt
[ 233]        :                                       
[ 234]    09CE: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 235]    09D1: E8 D5 0A                              CALL print_num          ;Printing AX reg
[ 236]        :                                       
[ 237]    09D4: E9 1B 09                              JMP Con                 ;Goes to Con Func
[ 238]        :                                       
[ 239]        :                                       
[ 240]    09D7:                                       Negation:        ;Negation Func
[ 241]        :                                       
[ 242]    09D7: 50 56 EB 1A 20 20 20 20 20 2A 2A 2A   print '     ****--Negation--****'
                2A 2D 2D 4E 65 67 61 74 69 6F 6E 2D 
                2D 2A 2A 2A 2A 00 BE DB 09 2E 8A 04 
                3C 00 74 07 46 B4 0E CD 10 EB F2 5E 
                58                                  
[ 243]    0A08: 50 56 EB 03 0D 0A 00 BE 0C 0A 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 244]    0A22: 50 56 EB 03 0D 0A 00 BE 26 0A 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 245]    0A3C: 50 56 EB 0F 45 6E 74 65 72 20 4E 75   print 'Enter Number: '
                6D 62 65 72 3A 20 00 BE 40 0A 2E 8A 
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 246]    0A62: E8 7F 09                              CALL scan_num       ;First no. input
[ 247]    0A65: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 248]        :                                       
[ 249]    0A69: 50 56 EB 03 0D 0A 00 BE 6D 0A 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 250]        :                                       
[ 251]    0A83: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 252]    0A86: F7 D8                                 NEG AX              ;Taking Neg of AX
[ 253]    0A88: A3 75 03                              MOV res, AX         ;Storing AX in res
[ 254]        :                                       
[ 255]    0A8B: 50 56 EB 03 0D 0A 00 BE 8F 0A 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 256]    0AA5: B4 09                                 MOV AH,9
[ 257]    0AA7: BA 36 02                              MOV DX, OFFSET msg_N    ;Displaying Message
[ 258]    0AAA: CD 21                                 INT 21h                 ;Calling Interrupt
[ 259]        :                                       
[ 260]    0AAC: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 261]    0AAF: E8 F7 09                              CALL print_num          ;Printing AX reg
[ 262]        :                                       
[ 263]    0AB2: E9 3D 08                              JMP Con                 ;Goes to Con Func
[ 264]        :                                       
[ 265]        :                                       
[ 266]    0AB5:                                       Square:             ;Square Func
[ 267]        :                                       
[ 268]    0AB5: 50 56 EB 18 20 20 20 20 20 2A 2A 2A   print '     ****--Square--****'
                2A 2D 2D 53 71 75 61 72 65 2D 2D 2A 
                2A 2A 2A 00 BE B9 0A 2E 8A 04 3C 00 
                74 07 46 B4 0E CD 10 EB F2 5E 58    
[ 269]    0AE4: 50 56 EB 03 0D 0A 00 BE E8 0A 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 270]    0AFE: 50 56 EB 03 0D 0A 00 BE 02 0B 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 271]    0B18: 50 56 EB 0F 45 6E 74 65 72 20 4E 75   print 'Enter Number: '
                6D 62 65 72 3A 20 00 BE 1C 0B 2E 8A 
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 272]    0B3E: E8 A3 08                              CALL scan_num       ;First no. input
[ 273]    0B41: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 274]        :                                       
[ 275]    0B45: 50 56 EB 03 0D 0A 00 BE 49 0B 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 276]        :                                       
[ 277]    0B5F: A1 71 03                              MOV AX, val1
[ 278]    0B62: F7 E0                                 MUL AX
[ 279]    0B64: A3 75 03                              MOV res, AX
[ 280]        :                                       
[ 281]    0B67: 50 56 EB 03 0D 0A 00 BE 6B 0B 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 282]    0B81: B4 09                                 MOV AH,9
[ 283]    0B83: BA 53 02                              MOV DX, OFFSET msg_SQ    ;Displaying Message
[ 284]    0B86: CD 21                                 INT 21h                 ;Calling Interrupt
[ 285]        :                                       
[ 286]    0B88: A1 75 03                              MOV AX, res
[ 287]    0B8B: E8 1B 09                              CALL print_num
[ 288]        :                                       
[ 289]    0B8E: E9 61 07                              JMP Con
[ 290]        :                                       
[ 291]        :                                       
[ 292]    0B91:                                       Cube:             ;Cube Func
[ 293]        :                                       
[ 294]    0B91: 50 56 EB 16 20 20 20 20 20 2A 2A 2A   print '     ****--Cube--****'
                2A 2D 2D 43 75 62 65 2D 2D 2A 2A 2A 
                2A 00 BE 95 0B 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 295]    0BBE: 50 56 EB 03 0D 0A 00 BE C2 0B 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 296]    0BD8: 50 56 EB 03 0D 0A 00 BE DC 0B 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 297]    0BF2: 50 56 EB 0F 45 6E 74 65 72 20 4E 75   print 'Enter Number: '
                6D 62 65 72 3A 20 00 BE F6 0B 2E 8A 
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 298]    0C18: E8 C9 07                              CALL scan_num       ;First no. input
[ 299]    0C1B: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 300]        :                                       
[ 301]    0C1F: 50 56 EB 03 0D 0A 00 BE 23 0C 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 302]        :                                       
[ 303]    0C39: A1 71 03                              MOV AX, val1
[ 304]    0C3C: F7 26 71 03                           MUL val1
[ 305]    0C40: F7 26 71 03                           MUL val1
[ 306]    0C44: A3 75 03                              MOV res, AX
[ 307]        :                                       
[ 308]    0C47: 50 56 EB 03 0D 0A 00 BE 4B 0C 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 309]    0C61: B4 09                                 MOV AH,9
[ 310]    0C63: BA 6D 02                              MOV DX, OFFSET msg_CB    ;Displaying Message
[ 311]    0C66: CD 21                                 INT 21h                 ;Calling Interrupt
[ 312]        :                                       
[ 313]    0C68: A1 75 03                              MOV AX, res
[ 314]    0C6B: E8 3B 08                              CALL print_num
[ 315]        :                                       
[ 316]    0C6E: E9 81 06                              JMP Con
[ 317]        :                                       
[ 318]        :                                       
[ 319]    0C71:                                       Modulus:
[ 320]        :                                       
[ 321]    0C71: 50 56 EB 19 20 20 20 20 20 2A 2A 2A   print '     ****--Modulus--****'
                2A 2D 2D 4D 6F 64 75 6C 75 73 2D 2D 
                2A 2A 2A 2A 00 BE 75 0C 2E 8A 04 3C 
                00 74 07 46 B4 0E CD 10 EB F2 5E 58 
                                                    
[ 322]    0CA1: 50 56 EB 03 0D 0A 00 BE A5 0C 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 323]    0CBB: 50 56 EB 03 0D 0A 00 BE BF 0C 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 324]    0CD5: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE D9 0C 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 325]    0D01: E8 E0 06                              CALL scan_num       ;First no. input
[ 326]    0D04: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 327]    0D08: A1 71 03                              MOV AX, val1        ;Moving val1 to AX reg
[ 328]        :                                       
[ 329]    0D0B: 50 56 EB 03 0D 0A 00 BE 0F 0D 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 330]        :                                       
[ 331]    0D25: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE 29 0D 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 332]    0D52: E8 8F 06                              CALL scan_num       ;Second no. input
[ 333]    0D55: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 334]    0D59: 8B 1E 73 03                           MOV BX, val2
[ 335]    0D5D: 50 56 EB 03 0D 0A 00 BE 61 0D 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 336]        :                                       
[ 337]    0D77: BA 00 00                              MOV DX, 0           ;Moving 0 in DX to avoid overflow
[ 338]        :                                       
[ 339]    0D7A: F7 F3                                 DIV BX            ;Dividing AX with val2
[ 340]    0D7C: 89 16 75 03                           MOV res, DX         ;Storing AX in res
[ 341]        :                                       
[ 342]    0D80: 50 56 EB 03 0D 0A 00 BE 84 0D 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 343]    0D9A: B4 09                                 MOV AH,9
[ 344]    0D9C: BA 0B 03                              MOV DX, OFFSET msg_MD    ;Displaying Message
[ 345]    0D9F: CD 21                                 INT 21h                 ;Calling Interrupt
[ 346]        :                                       
[ 347]    0DA1: A1 75 03                              MOV AX, res             ;Moving res to AX
[ 348]    0DA4: E8 02 07                              CALL print_num          ;Printing AX reg
[ 349]        :                                       
[ 350]    0DA7: E9 48 05                              JMP Con                 ;Goes to Con Func
[ 351]        :                                       
[ 352]        :                                       
[ 353]        :                                       
[ 354]    0DAA:                                       _OR:            ;OR Func
[ 355]        :                                       
[ 356]    0DAA: 50 56 EB 1B 20 20 20 20 20 2A 2A 2A   print '     ****--Binary OR--****'
                2A 2D 2D 42 69 6E 61 72 79 20 4F 52 
                2D 2D 2A 2A 2A 2A 00 BE AE 0D 2E 8A 
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 357]    0DDC: 50 56 EB 03 0D 0A 00 BE E0 0D 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 358]    0DF6: 50 56 EB 03 0D 0A 00 BE FA 0D 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 359]    0E10: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE 14 0E 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 360]    0E3C: E8 A5 05                              CALL scan_num       ;First no. input
[ 361]    0E3F: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 362]        :                                       
[ 363]    0E43: 50 56 EB 03 0D 0A 00 BE 47 0E 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 364]        :                                       
[ 365]    0E5D: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE 61 0E 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 366]    0E8A: E8 57 05                              CALL scan_num       ;Second no. input
[ 367]    0E8D: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 368]    0E91: 50 56 EB 03 0D 0A 00 BE 95 0E 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 369]        :                                       
[ 370]    0EAB: A1 71 03                              MOV AX, val1
[ 371]    0EAE: 0B 06 73 03                           OR AX, val2
[ 372]    0EB2: A3 75 03                              MOV res, AX
[ 373]        :                                       
[ 374]    0EB5: 50 56 EB 03 0D 0A 00 BE B9 0E 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 375]    0ECF: B4 09                                 MOV AH,9
[ 376]    0ED1: BA 85 02                              MOV DX, OFFSET msg_OR    ;Displaying Message
[ 377]    0ED4: CD 21                                 INT 21h                 ;Calling Interrupt
[ 378]        :                                       
[ 379]    0ED6: A1 75 03                              MOV AX, res
[ 380]    0ED9: E8 CD 05                              CALL print_num          ;Prints on screen
[ 381]        :                                       
[ 382]    0EDC: E9 13 04                              JMP Con
[ 383]        :                                       
[ 384]        :                                       
[ 385]    0EDF:                                       _AND:               ;AND Func
[ 386]        :                                       
[ 387]    0EDF: 50 56 EB 1C 20 20 20 20 20 2A 2A 2A   print '     ****--Binary AND--****'
                2A 2D 2D 42 69 6E 61 72 79 20 41 4E 
                44 2D 2D 2A 2A 2A 2A 00 BE E3 0E 2E 
                8A 04 3C 00 74 07 46 B4 0E CD 10 EB 
                F2 5E 58                            
[ 388]    0F12: 50 56 EB 03 0D 0A 00 BE 16 0F 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 389]    0F2C: 50 56 EB 03 0D 0A 00 BE 30 0F 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 390]    0F46: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE 4A 0F 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 391]    0F72: E8 6F 04                              CALL scan_num       ;First no. input
[ 392]    0F75: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 393]        :                                       
[ 394]    0F79: 50 56 EB 03 0D 0A 00 BE 7D 0F 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 395]        :                                       
[ 396]    0F93: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE 97 0F 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 397]    0FC0: E8 21 04                              CALL scan_num       ;Second no. input
[ 398]    0FC3: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 399]    0FC7: 50 56 EB 03 0D 0A 00 BE CB 0F 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 400]        :                                       
[ 401]    0FE1: A1 71 03                              MOV AX, val1
[ 402]    0FE4: 23 06 73 03                           AND AX, val2
[ 403]    0FE8: A3 75 03                              MOV res, AX
[ 404]        :                                       
[ 405]    0FEB: 50 56 EB 03 0D 0A 00 BE EF 0F 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 406]    1005: B4 09                                 MOV AH,9
[ 407]    1007: BA A9 02                              MOV DX, OFFSET msg_AND    ;Displaying Message
[ 408]    100A: CD 21                                 INT 21h                 ;Calling Interrupt
[ 409]        :                                       
[ 410]    100C: A1 75 03                              MOV AX, res
[ 411]    100F: E8 97 04                              CALL print_num          ;Prints on screen
[ 412]        :                                       
[ 413]    1012: E9 DD 02                              JMP Con
[ 414]        :                                       
[ 415]        :                                       
[ 416]    1015:                                       _XOR:               ;XOR Func
[ 417]        :                                       
[ 418]    1015: 50 56 EB 1C 20 20 20 20 20 2A 2A 2A   print '     ****--Binary XOR--****'
                2A 2D 2D 42 69 6E 61 72 79 20 58 4F 
                52 2D 2D 2A 2A 2A 2A 00 BE 19 10 2E 
                8A 04 3C 00 74 07 46 B4 0E CD 10 EB 
                F2 5E 58                            
[ 419]    1048: 50 56 EB 03 0D 0A 00 BE 4C 10 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 420]    1062: 50 56 EB 03 0D 0A 00 BE 66 10 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 421]    107C: 50 56 EB 15 45 6E 74 65 72 20 46 69   print 'Enter First Number: '
                72 73 74 20 4E 75 6D 62 65 72 3A 20 
                00 BE 80 10 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 422]    10A8: E8 39 03                              CALL scan_num       ;First no. input
[ 423]    10AB: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 424]        :                                       
[ 425]    10AF: 50 56 EB 03 0D 0A 00 BE B3 10 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 426]        :                                       
[ 427]    10C9: 50 56 EB 16 45 6E 74 65 72 20 53 65   print 'Enter Second Number: '
                63 6F 6E 64 20 4E 75 6D 62 65 72 3A 
                20 00 BE CD 10 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 428]    10F6: E8 EB 02                              CALL scan_num       ;Second no. input
[ 429]    10F9: 89 0E 73 03                           MOV val2, CX        ;Moving second no. to val2
[ 430]    10FD: 50 56 EB 03 0D 0A 00 BE 01 11 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 431]        :                                       
[ 432]    1117: A1 71 03                              MOV AX, val1
[ 433]    111A: 33 06 73 03                           XOR AX, val2
[ 434]    111E: A3 75 03                              MOV res, AX
[ 435]        :                                       
[ 436]    1121: 50 56 EB 03 0D 0A 00 BE 25 11 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 437]    113B: B4 09                                 MOV AH,9
[ 438]    113D: BA CF 02                              MOV DX, OFFSET msg_XOR    ;Displaying Message
[ 439]    1140: CD 21                                 INT 21h                 ;Calling Interrupt
[ 440]        :                                       
[ 441]    1142: A1 75 03                              MOV AX, res
[ 442]    1145: E8 61 03                              CALL print_num          ;Prints on screen
[ 443]        :                                       
[ 444]    1148: E9 A7 01                              JMP Con
[ 445]        :                                       
[ 446]        :                                       
[ 447]    114B:                                       _NOT:             ;NOT Func
[ 448]        :                                       
[ 449]    114B: 50 56 EB 1C 20 20 20 20 20 2A 2A 2A   print '     ****--Binary NOT--****'
                2A 2D 2D 42 69 6E 61 72 79 20 4E 4F 
                54 2D 2D 2A 2A 2A 2A 00 BE 4F 11 2E 
                8A 04 3C 00 74 07 46 B4 0E CD 10 EB 
                F2 5E 58                            
[ 450]    117E: 50 56 EB 03 0D 0A 00 BE 82 11 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 451]    1198: 50 56 EB 03 0D 0A 00 BE 9C 11 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 452]    11B2: 50 56 EB 0F 45 6E 74 65 72 20 4E 75   print 'Enter Number: '
                6D 62 65 72 3A 20 00 BE B6 11 2E 8A 
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 453]    11D8: E8 09 02                              CALL scan_num       ;First no. input
[ 454]    11DB: 89 0E 71 03                           MOV val1, CX        ;Moving first no. to val1
[ 455]        :                                       
[ 456]    11DF: 50 56 EB 03 0D 0A 00 BE E3 11 2E 8A   printn      ;New Line
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 457]        :                                       
[ 458]    11F9: A1 71 03                              MOV AX, val1
[ 459]    11FC: F7 D0                                 NOT AX
[ 460]    11FE: A3 75 03                              MOV res, AX
[ 461]        :                                       
[ 462]    1201: 50 56 EB 03 0D 0A 00 BE 05 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 463]    121B: B4 09                                 MOV AH,9
[ 464]    121D: BA F4 02                              MOV DX, OFFSET msg_NOT    ;Displaying Message
[ 465]    1220: CD 21                                 INT 21h                 ;Calling Interrupt
[ 466]        :                                       
[ 467]    1222: A1 75 03                              MOV AX, res
[ 468]    1225: E8 81 02                              CALL print_num
[ 469]        :                                       
[ 470]    1228: E9 C7 00                              JMP Con
[ 471]        :                                       
[ 472]        :                                       
[ 473]    122B:                                       Error:
[ 474]        :                                       
[ 475]    122B: 50 56 EB 03 0D 0A 00 BE 2F 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 476]    1245: 50 56 EB 19 43 61 6E 6E 6F 74 20 62   print 'Cannot be divided by 0. '
                65 20 64 69 76 69 64 65 64 20 62 79 
                20 30 2E 20 00 BE 49 12 2E 8A 04 3C 
                00 74 07 46 B4 0E CD 10 EB F2 5E 58 
                                                    
[ 477]    1275: 50 56 EB 03 0D 0A 00 BE 79 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 478]    128F: 50 56 EB 15 55 6E 64 65 66 69 6E 65   print 'Undefined Math Error'
                64 20 4D 61 74 68 20 45 72 72 6F 72 
                00 BE 93 12 2E 8A 04 3C 00 74 07 46 
                B4 0E CD 10 EB F2 5E 58             
[ 479]    12BB: 50 56 EB 03 0D 0A 00 BE BF 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 480]    12D5: 50 56 EB 03 0D 0A 00 BE D9 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 481]        :                                       
[ 482]    12EF: E9 A4 F5                              JMP Division
[ 483]        :                                       
[ 484]        :                                       
[ 485]    12F2:                                       Con:            ;Continue Func
[ 486]        :                                       
[ 487]    12F2: 50 56 EB 03 0D 0A 00 BE F6 12 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 488]    130C: B4 09                                 MOV AH,9
[ 489]    130E: BA 2B 03                              MOV DX, OFFSET cont    ;Displaying Message
[ 490]    1311: CD 21                                 INT 21h                 ;Calling Interrupt
[ 491]    1313: 50 56 EB 16 28 59 65 73 20 3D 20 31   print '(Yes = 1 / No = 0) : '
                20 2F 20 4E 6F 20 3D 20 30 29 20 3A 
                20 00 BE 17 13 2E 8A 04 3C 00 74 07 
                46 B4 0E CD 10 EB F2 5E 58          
[ 492]    1340: E8 A1 00                              CALL scan_num           ;Enter 1 for Yes and 0 for No
[ 493]    1343: 89 0E 77 03                           MOV agn, CX
[ 494]    1347: 50 56 EB 03 0D 0A 00 BE 4B 13 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 495]    1361: 50 56 EB 03 0D 0A 00 BE 65 13 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 496]        :                                       
[ 497]    137B: 83 3E 77 03 01                        CMP agn, 1
[ 498]    1380: 75 03 E9 F8 EF                        JE Start            ;Jumps to Start Func if input is equal to 1
[ 499]        :                                       
[ 500]    1385: 83 3E 77 03 00                        CMP agn, 0
[ 501]    138A: 74 1A                                 JE _Bye             ;Jumps to Bye Func if input is equal to 0
[ 502]    138C: 50 56 EB 03 0D 0A 00 BE 90 13 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 503]        :                                       
[ 504]        :                                       
[ 505]    13A6:                                       _Bye:       ;EXIT Func
[ 506]        :                                       
[ 507]    13A6: 50 56 EB 03 0D 0A 00 BE AA 13 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 508]    13C0: 50 56 EB 03 0D 0A 00 BE C4 13 2E 8A   printn
                04 3C 00 74 07 46 B4 0E CD 10 EB F2 
                5E 58                               
[ 509]    13DA: B4 09                                 MOV AH,9
[ 510]    13DC: BA 49 03                              MOV DX, OFFSET bye    ;Displaying Message
[ 511]    13DF: CD 21                                 INT 21h
[ 512]        :                                       
[ 513]        :                                       
[ 514]        :                                       MAIN ENDP
[ 515]        :                                       
[ 516]        :                                       
[ 517]    13E1: E9 C3 00 52 50 56 B9 00 00 2E C6 06   DEFINE_SCAN_NUM
                A4 14 00 B4 00 CD 16 B4 0E CD 10 3C 
                2D 74 69 3C 0D 75 03 E9 93 00 3C 08 
                75 1E BA 00 00 8B C1 2E F7 36 A5 14 
                8B C8 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB CB 3C 30 73 02 
                EB 04 3C 39 76 1A 50 B0 08 B4 0E CD 
                10 58 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB A7 50 8B C1 2E 
                F7 26 A5 14 8B C8 58 83 FA 00 75 19 
                2C 30 B4 00 8B D1 03 C8 72 0A EB 8B 
                2E C6 06 A4 14 01 EB 83 8B CA BA 00 
                00 8B C1 2E F7 36 A5 14 8B C8 50 B0 
                08 B4 0E CD 10 58 50 B0 20 B4 0E CD 
                10 58 50 B0 08 B4 0E CD 10 58 E9 5A 
                FF 2E 80 3E A4 14 00 74 02 F7 D9 5E 
                58 5A C3 00 0A 00                   
[ 518]    14A7: EB 26 52 50 3D 00 00 75 0A 50 B0 30   DEFINE_PRINT_NUM
                B4 0E CD 10 58 EB 12 3D 00 00 79 0A 
                F7 D8 50 B0 2D B4 0E CD 10 58 E8 05 
                00 58 5A C3                         
[ 519]    14CF: EB 50 50 53 51 52 B9 01 00 BB 10 27   DEFINE_PRINT_NUM_UNS
                3D 00 00 74 32 83 FB 00 74 35 83 F9 
                00 74 04 3B C3 72 14 B9 00 00 BA 00 
                00 F7 F3 04 30 50 8A C0 B4 0E CD 10 
                58 8B C2 50 BA 00 00 8B C3 2E F7 36 
                1F 15 8B D8 58 EB CE 50 B0 30 B4 0E 
                CD 10 58 5A 59 5B 58 C3 0A 00       
[ 520]        :                                       
[ 521]        :                                       
[ 522]        :                                       END main
[ 523]        :                                       
[ 524]        :                                       HLT         ;Halting
[ 525]        :                                       ret         ;Return
[ 526]        :                                       
[ 527]        :                                       
[ 528]        :                                       
[ 529]        :                                       
[ 530]        :                                       
 
===================================================================================================
 




===================================================================================================
